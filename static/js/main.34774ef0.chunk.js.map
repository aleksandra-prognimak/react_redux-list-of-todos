{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","value","defaultState","query","status","ALL","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectedTodo","filterTodos","ACTIVE","completed","COMPLETED","title","toLowerCase","includes","length","className","map","classNames","id","onClick","actionsTodo","changeTodo","TodoFilter","handleQuery","actionsFilter","onSubmit","event","preventDefault","onChange","handleStatus","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","selectedUser","setSelectedUser","useEffect","userId","href","email","name","App","isLoaded","setIsLoaded","actionsTodos","catch","err","Error","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.34774ef0.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return { ...state, ...action.payload };\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype QueryAction = {\n  type: 'filter/QUERY';\n  payload: string;\n};\n\ntype StatusAction = {\n  type: 'filter/STATUS';\n  payload: Status;\n};\n\nconst query = (value: string): QueryAction => ({\n  type: 'filter/QUERY',\n  payload: value,\n});\n\nconst status = (value: Status): StatusAction => ({\n  type: 'filter/STATUS',\n  payload: value,\n});\n\nexport const actions = { query, status };\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst defaultState = {\n  query: '',\n  status: Status.ALL,\n};\n\ntype Action = QueryAction | StatusAction;\n\nconst filterReducer = (state = defaultState, action: Action): State => {\n  switch (action.type) {\n    case 'filter/QUERY':\n      return { ...state, query: action.payload };\n    case 'filter/STATUS':\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddTodosAction = {\n  type: 'todos/ADD';\n  payload: Todo[];\n};\n\nconst addTodos = (todos: Todo[]): AddTodosAction => ({\n  type: 'todos/ADD',\n  payload: todos,\n});\n\nexport const actions = { addTodos };\n\ntype Action = AddTodosAction;\n\nconst todosReducer = (state: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/ADD':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsTodo } from '../../features/currentTodo';\nimport { Status } from '../../types/Status';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector((state) => state.todos);\n  const selectedTodo = useAppSelector((state) => state.currentTodo);\n  const query = useAppSelector((state) => state.filter.query);\n  const status = useAppSelector((state) => state.filter.status);\n\n  const lowerText = (str: string) => (\n    str.toLowerCase().includes(query.toLowerCase())\n  );\n\n  const filterTodos = todos\n    .filter((todo) => {\n      switch (status) {\n        case Status.ACTIVE:\n          return !todo.completed;\n        case Status.COMPLETED:\n          return todo.completed;\n        default:\n          return todo;\n      }\n    })\n    .filter((todo) => lowerText(todo.title));\n\n  const changeTodo = (todo: Todo) => {\n    dispatch(actionsTodo.setTodo(todo));\n  };\n\n  return (\n    <>\n      {filterTodos.length === 0 ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filterTodos.map((todo) => (\n              <tr\n                data-cy=\"todo\"\n                key={todo.id}\n                className={classNames({\n                  'has-background-info-light': selectedTodo?.id === todo.id,\n                })}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span\n                      className=\"icon\"\n                      data-cy=\"iconCompleted\"\n                    >\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={classNames({\n                      'has-text-danger': !todo.completed,\n                      'has-text-success': todo.completed,\n                    })}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => changeTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={classNames(\n                          'far',\n                          { 'fa-eye-slash': selectedTodo?.id === todo.id },\n                          { 'fa-eye': selectedTodo?.id !== todo.id },\n                        )}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as actionsFilter } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const query = useAppSelector((state) => state.filter.query);\n  const status = useAppSelector((state) => state.filter.status);\n\n  const handleStatus = (value: string) => {\n    switch (value) {\n      case Status.ACTIVE:\n        return dispatch(actionsFilter.status(Status.ACTIVE));\n      case Status.COMPLETED:\n        return dispatch(actionsFilter.status(Status.COMPLETED));\n      default:\n        return dispatch(actionsFilter.status(Status.ALL));\n    }\n  };\n\n  const handleQuery = (value: string) => {\n    dispatch(actionsFilter.query(value));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={event => handleStatus(event.target.value)}\n          >\n            <option value={Status.ALL}>All</option>\n            <option value={Status.ACTIVE}>Active</option>\n            <option value={Status.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => handleQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: 'all' }}\n          >\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"button\"\n              onClick={() => handleQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../../api';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedTodo = useAppSelector((state) => state.currentTodo);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (!selectedTodo) {\n      return;\n    }\n\n    getUser(selectedTodo.userId)\n      .then(setSelectedUser);\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {\n        !selectedUser\n          ? <Loader />\n          : (\n            <div className=\"modal-card\">\n              <header className=\"modal-card-head\">\n                <div\n                  className=\"modal-card-title has-text-weight-medium\"\n                  data-cy=\"modal-header\"\n                >\n                  {`Todo #${selectedTodo?.id}`}\n                </div>\n\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  aria-label=\"button\"\n                  onClick={() => dispatch(actions.removeTodo())}\n                />\n              </header>\n\n              <div className=\"modal-card-body\">\n                <p className=\"block\" data-cy=\"modal-title\">\n                  {selectedTodo?.title}\n                </p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {\n                    selectedTodo?.completed\n                      ? <strong className=\"has-text-success\">Done</strong>\n                      : <strong className=\"has-text-danger\">Planned</strong>\n                  }\n\n                  {' by '}\n\n                  <a href={selectedUser?.email}>\n                    {selectedUser?.name}\n                  </a>\n                </p>\n              </div>\n            </div>\n          )\n      }\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppSelector } from './app/hooks';\nimport { actions as actionsTodos } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const todo = useAppSelector((state) => state.currentTodo);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    setIsLoaded(true);\n\n    getTodos()\n      .then((res) => {\n        dispatch(actionsTodos.addTodos(res));\n      })\n      .catch((err) => {\n        throw new Error(err);\n      })\n      .finally(() => {\n        setIsLoaded(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {\n                isLoaded\n                  ? <Loader />\n                  : <TodoList />\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {todo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}